-- Drop existing tables in reverse order to handle dependencies
DROP TABLE IF EXISTS word_requests;
DROP TABLE IF EXISTS word_categories;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS plays;
DROP TABLE IF EXISTS games;
DROP TABLE IF EXISTS invites;
DROP TABLE IF EXISTS group_users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS groups;

-- Drop existing types
DROP TYPE IF EXISTS word_request_status;
DROP TYPE IF EXISTS game_mode_type;
DROP TYPE IF EXISTS invite_status;

-- Define ENUM types first
CREATE TYPE invite_status AS ENUM ('Pending', 'Accepted', 'Rejected');
CREATE TYPE game_mode_type AS ENUM ('Classic', 'Timed', 'Categories');
CREATE TYPE word_request_status AS ENUM ('Pending', 'Accepted', 'Rejected');

CREATE TABLE groups (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE group_users (
  group_id INT NOT NULL,
  user_id INT NOT NULL,
  is_owner BOOLEAN DEFAULT FALSE,
  PRIMARY KEY (group_id, user_id),
  FOREIGN KEY (group_id) REFERENCES groups (id),
  FOREIGN KEY (user_id) REFERENCES users (id)
);


COMMENT ON TABLE group_users IS 'Composite primary key on (group_id, user_id)';
COMMENT ON COLUMN group_users.is_owner IS 'Indicates if the user is an owner of the group.';


CREATE TABLE invites (
  sender_id INT NOT NULL,
  recipient_id INT NOT NULL,
  group_id INT NOT NULL,
  send_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  status invite_status NOT NULL,
  PRIMARY KEY (sender_id, recipient_id, group_id),
  FOREIGN KEY (sender_id) REFERENCES users (id),
  FOREIGN KEY (recipient_id) REFERENCES users (id),
  FOREIGN KEY (group_id) REFERENCES groups (id)
);

CREATE TABLE games (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  game_mode game_mode_type NOT NULL,
  seed INT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE plays (
  game_id INT NOT NULL,
  user_id INT NOT NULL,
  category_count INT NOT NULL,
  start_time TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  end_time TIMESTAMPTZ,
  PRIMARY KEY (game_id, user_id),
  FOREIGN KEY (game_id) REFERENCES games (id),
  FOREIGN KEY (user_id) REFERENCES users (id)
);


CREATE TABLE categories (
  category TEXT PRIMARY KEY
);

CREATE TABLE word_categories (
  word TEXT NOT NULL,
  category TEXT NOT NULL,
  PRIMARY KEY (word, category),
  FOREIGN KEY (category) REFERENCES categories (category)
);

CREATE TABLE word_requests (
  user_id INT NOT NULL,
  word TEXT NOT NULL,
  category TEXT NOT NULL,
  status word_request_status NOT NULL,
  PRIMARY KEY (user_id, word, category),
  FOREIGN KEY (user_id) REFERENCES users (id),
  FOREIGN KEY (category) REFERENCES categories (category)
);

CREATE INDEX IF NOT EXISTS  word_idx ON word_categories(word);

CREATE INDEX IF NOT EXISTS category_idx ON word_categories(category);

CREATE INDEX IF NOT EXISTS date_idx ON games(created_at);

